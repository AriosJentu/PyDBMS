
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BETWEEN COMMA CREATE EQUAL FLOOR_DIV FROM GREATER_THAN GREATER_THAN_OR_EQUAL IN INSERT INTO LESS_THAN LESS_THAN_OR_EQUAL LIKE LPAREN MINUS MUL NAME NAND NOR NOT NOT_EQUAL OR PERCENT PLUS POWER RPAREN SELECT SHOW TABLE TRUE_DIV VALUES WHERE bol int strstart : create\n             | show\n             | select\n             | insertcreate : CREATE create_bodycreate_body : TABLE NAME LPAREN values RPARENvalues : NAME type \n              | values COMMA NAME typeshow : SHOW CREATE TABLE NAMEselect : SELECT select_body \n              | SELECT select_body where_bodyselect_body : fields FROM NAME\n                   | LPAREN fields RPAREN FROM NAMEwhere_body : WHERE where_conditionwhere_condition : field operator statement\n                       | where_condition connecting_operator field operator statementfield : NAMEconnecting_operator : OR\n                           | NOR\n                           | NAND\n                           | AND operator : EQUAL\n                | NOT_EQUAL\n                | GREATER_THAN\n                | LESS_THAN\n                | GREATER_THAN_OR_EQUAL\n                | LESS_THAN_OR_EQUAL\n                | BETWEEN \n                | LIKE\n                | IN\n                | OR\n                | NOR\n                | NOT\n                | NAND\n                | AND\n                | PLUS\n                | MINUS\n                | MUL\n                | TRUE_DIV\n                | FLOOR_DIV\n                | PERCENT\n                | POWERstatement : NAMEinsert : INSERT insert_bodyinsert_body : INTO NAME LPAREN fields RPAREN\n                   | INTO NAME VALUES LPAREN fields RPARENfields : NAME\n              | fields COMMA NAMEtype : int \n            | str\n            | bol'
    
_lr_action_items = {'CREATE':([0,7,],[6,12,]),'SHOW':([0,],[7,]),'SELECT':([0,],[8,]),'INSERT':([0,],[9,]),'$end':([1,2,3,4,5,10,13,17,21,28,29,32,73,76,77,78,79,83,85,],[0,-1,-2,-3,-4,-5,-10,-44,-11,-9,-14,-12,-6,-15,-43,-13,-45,-46,-16,]),'TABLE':([6,12,],[11,20,]),'LPAREN':([8,19,26,36,],[16,27,35,68,]),'NAME':([8,11,16,18,20,22,23,24,27,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,74,82,],[15,19,15,26,28,31,32,33,37,15,31,-18,-19,-20,-21,77,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,78,15,81,77,]),'INTO':([9,],[18,]),'WHERE':([13,32,78,],[22,-12,-13,]),'FROM':([14,15,33,34,],[23,-47,-48,66,]),'COMMA':([14,15,25,33,38,67,69,70,71,72,80,84,],[24,-47,24,-48,74,24,-7,-49,-50,-51,24,-8,]),'RPAREN':([15,25,33,38,67,69,70,71,72,80,84,],[-47,34,-48,73,79,-7,-49,-50,-51,83,-8,]),'VALUES':([26,],[36,]),'OR':([29,30,31,75,76,77,85,],[40,54,-17,54,-15,-43,-16,]),'NOR':([29,30,31,75,76,77,85,],[41,55,-17,55,-15,-43,-16,]),'NAND':([29,30,31,75,76,77,85,],[42,57,-17,57,-15,-43,-16,]),'AND':([29,30,31,75,76,77,85,],[43,58,-17,58,-15,-43,-16,]),'EQUAL':([30,31,75,],[45,-17,45,]),'NOT_EQUAL':([30,31,75,],[46,-17,46,]),'GREATER_THAN':([30,31,75,],[47,-17,47,]),'LESS_THAN':([30,31,75,],[48,-17,48,]),'GREATER_THAN_OR_EQUAL':([30,31,75,],[49,-17,49,]),'LESS_THAN_OR_EQUAL':([30,31,75,],[50,-17,50,]),'BETWEEN':([30,31,75,],[51,-17,51,]),'LIKE':([30,31,75,],[52,-17,52,]),'IN':([30,31,75,],[53,-17,53,]),'NOT':([30,31,75,],[56,-17,56,]),'PLUS':([30,31,75,],[59,-17,59,]),'MINUS':([30,31,75,],[60,-17,60,]),'MUL':([30,31,75,],[61,-17,61,]),'TRUE_DIV':([30,31,75,],[62,-17,62,]),'FLOOR_DIV':([30,31,75,],[63,-17,63,]),'PERCENT':([30,31,75,],[64,-17,64,]),'POWER':([30,31,75,],[65,-17,65,]),'int':([37,81,],[70,70,]),'str':([37,81,],[71,71,]),'bol':([37,81,],[72,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'create':([0,],[2,]),'show':([0,],[3,]),'select':([0,],[4,]),'insert':([0,],[5,]),'create_body':([6,],[10,]),'select_body':([8,],[13,]),'fields':([8,16,35,68,],[14,25,67,80,]),'insert_body':([9,],[17,]),'where_body':([13,],[21,]),'where_condition':([22,],[29,]),'field':([22,39,],[30,75,]),'values':([27,],[38,]),'connecting_operator':([29,],[39,]),'operator':([30,75,],[44,82,]),'type':([37,81,],[69,84,]),'statement':([44,82,],[76,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> create','start',1,'p_start','newParser.py',97),
  ('start -> show','start',1,'p_start','newParser.py',98),
  ('start -> select','start',1,'p_start','newParser.py',99),
  ('start -> insert','start',1,'p_start','newParser.py',100),
  ('create -> CREATE create_body','create',2,'p_create','newParser.py',106),
  ('create_body -> TABLE NAME LPAREN values RPAREN','create_body',5,'p_create_body','newParser.py',112),
  ('values -> NAME type','values',2,'p_values','newParser.py',119),
  ('values -> values COMMA NAME type','values',4,'p_values','newParser.py',120),
  ('show -> SHOW CREATE TABLE NAME','show',4,'p_show','newParser.py',138),
  ('select -> SELECT select_body','select',2,'p_select','newParser.py',144),
  ('select -> SELECT select_body where_body','select',3,'p_select','newParser.py',145),
  ('select_body -> fields FROM NAME','select_body',3,'p_select_body','newParser.py',153),
  ('select_body -> LPAREN fields RPAREN FROM NAME','select_body',5,'p_select_body','newParser.py',154),
  ('where_body -> WHERE where_condition','where_body',2,'p_where_body','newParser.py',174),
  ('where_condition -> field operator statement','where_condition',3,'p_where_condition','newParser.py',181),
  ('where_condition -> where_condition connecting_operator field operator statement','where_condition',5,'p_where_condition','newParser.py',182),
  ('field -> NAME','field',1,'p_field','newParser.py',205),
  ('connecting_operator -> OR','connecting_operator',1,'p_connecting_operator','newParser.py',210),
  ('connecting_operator -> NOR','connecting_operator',1,'p_connecting_operator','newParser.py',211),
  ('connecting_operator -> NAND','connecting_operator',1,'p_connecting_operator','newParser.py',212),
  ('connecting_operator -> AND','connecting_operator',1,'p_connecting_operator','newParser.py',213),
  ('operator -> EQUAL','operator',1,'p_operator','newParser.py',218),
  ('operator -> NOT_EQUAL','operator',1,'p_operator','newParser.py',219),
  ('operator -> GREATER_THAN','operator',1,'p_operator','newParser.py',220),
  ('operator -> LESS_THAN','operator',1,'p_operator','newParser.py',221),
  ('operator -> GREATER_THAN_OR_EQUAL','operator',1,'p_operator','newParser.py',222),
  ('operator -> LESS_THAN_OR_EQUAL','operator',1,'p_operator','newParser.py',223),
  ('operator -> BETWEEN','operator',1,'p_operator','newParser.py',224),
  ('operator -> LIKE','operator',1,'p_operator','newParser.py',225),
  ('operator -> IN','operator',1,'p_operator','newParser.py',226),
  ('operator -> OR','operator',1,'p_operator','newParser.py',227),
  ('operator -> NOR','operator',1,'p_operator','newParser.py',228),
  ('operator -> NOT','operator',1,'p_operator','newParser.py',229),
  ('operator -> NAND','operator',1,'p_operator','newParser.py',230),
  ('operator -> AND','operator',1,'p_operator','newParser.py',231),
  ('operator -> PLUS','operator',1,'p_operator','newParser.py',232),
  ('operator -> MINUS','operator',1,'p_operator','newParser.py',233),
  ('operator -> MUL','operator',1,'p_operator','newParser.py',234),
  ('operator -> TRUE_DIV','operator',1,'p_operator','newParser.py',235),
  ('operator -> FLOOR_DIV','operator',1,'p_operator','newParser.py',236),
  ('operator -> PERCENT','operator',1,'p_operator','newParser.py',237),
  ('operator -> POWER','operator',1,'p_operator','newParser.py',238),
  ('statement -> NAME','statement',1,'p_statement','newParser.py',244),
  ('insert -> INSERT insert_body','insert',2,'p_insert','newParser.py',250),
  ('insert_body -> INTO NAME LPAREN fields RPAREN','insert_body',5,'p_insert_body','newParser.py',256),
  ('insert_body -> INTO NAME VALUES LPAREN fields RPAREN','insert_body',6,'p_insert_body','newParser.py',257),
  ('fields -> NAME','fields',1,'p_fields','newParser.py',272),
  ('fields -> fields COMMA NAME','fields',3,'p_fields','newParser.py',273),
  ('type -> int','type',1,'p_type','newParser.py',291),
  ('type -> str','type',1,'p_type','newParser.py',292),
  ('type -> bol','type',1,'p_type','newParser.py',293),
]
